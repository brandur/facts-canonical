#!/usr/bin/env ruby

require "json"
require "net/https"
require "uri"

def extract_slug(file)
  file.gsub(%r{.*/(.*)\.md$}, "\\1")
end

def parse(file)
  name = nil
  facts = []

  if File.exists?(file)
    File.open(file).each_line do |line|
      if line =~ /^\s*\* (.+)$/
        facts << $1.strip
      elsif !name && line.strip != ""
        name = line.strip
      end
    end
  end

  return name, facts
end

file = ARGV.first
raise "usage: create <FILE>" unless file
raise "#{file} does not exist" unless File.exists?(file)
raise "set FACTS_HOST" unless ENV["FACTS_HOST"]
raise "set FACTS_HTTP_API_KEY" unless ENV["FACTS_HTTP_API_KEY"]

file = File.expand_path(file)
payloads = []

slug = extract_slug(file)
name, facts = parse(file)
payload = {
  name: name,
  slug: slug,
  facts: facts.map { |f| { content: f } },
}

puts "host=#{ENV["FACTS_HOST"]}/categories/#{slug} method=PUT"
uri = URI.parse("#{ENV["FACTS_HOST"]}/categories/#{slug}")

http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true if uri.scheme == "https"
request = Net::HTTP::Put.new(uri.request_uri)
request.basic_auth("", ENV["FACTS_HTTP_API_KEY"])
request.set_form_data({ "category" => JSON.dump(payload) })

start = Time.now
response = http.request(request)
puts "status=#{response.code.to_i} elapsed=#{((Time.now - start) * 1000).to_i}ms"
